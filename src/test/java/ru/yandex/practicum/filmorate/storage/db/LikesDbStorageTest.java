package ru.yandex.practicum.filmorate.storage.db;

import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;
import org.springframework.jdbc.core.JdbcTemplate;
import ru.yandex.practicum.filmorate.exception.NotFoundDataException;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.model.Genre;
import ru.yandex.practicum.filmorate.model.Mpa;

import java.time.LocalDate;
import java.util.List;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

@JdbcTest
@RequiredArgsConstructor(onConstructor_ = @Autowired)
class LikesDbStorageTest {
    private final JdbcTemplate jdbcTemplate;

    @BeforeEach
    public void newDateBase() {
        jdbcTemplate.update("drop table if exists mpa, films, likes,users,friends,genre,genre_link;\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS mpa (\n" +
                "  mpa_id integer PRIMARY KEY,\n" +
                "  name varchar(255) NOT null unique\n" +
                ");\n" +
                "CREATE TABLE IF NOT EXISTS films (\n" +
                "  film_id integer generated by default as identity not null PRIMARY key,\n" +
                "  name varchar(255) NOT NULL,\n" +
                "  description varchar(255),\n" +
                "  releaseDate date NOT null,\n" +
                "  duration integer NOT NULL,\n" +
                "  mpa integer NOT null REFERENCES mpa (mpa_id) on delete cascade\n" +
                ");\n" +
                "\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS users (\n" +
                "  user_id integer generated by default as identity not null PRIMARY key,\n" +
                "  email varchar UNIQUE NOT NULL,\n" +
                "  login varchar(255) NOT NULL,\n" +
                "  name varchar(255) NOT NULL,\n" +
                "  birthday date NOT NULL\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS likes (\n" +
                "film_id integer REFERENCES films (film_id) on delete cascade,\n" +
                "user_id integer REFERENCES users (user_id) on delete cascade,\n" +
                "  PRIMARY KEY (film_id, user_id)\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS friends (\n" +
                "  user_id integer references users (user_id) on delete cascade,\n" +
                "  friends_id integer references users (user_id) on delete cascade,\n" +
                "  PRIMARY KEY (user_id, friends_id)\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS genre (\n" +
                "  genre_id integer PRIMARY KEY,\n" +
                "  name varchar(255) NOT NULL\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS genre_link (\n" +
                "  film_id integer REFERENCES films (film_id) on delete cascade,\n" +
                "  genre_id integer REFERENCES genre (genre_id) on delete cascade,\n" +
                "  PRIMARY KEY (film_id, genre_id)\n" +
                ")");
        jdbcTemplate.update("insert into mpa (mpa_id, name) values (1, 'G'),(2, 'PG')," +
                "(3, 'PG-13'),(4, 'R'),(5, 'NC-17')");
        jdbcTemplate.update("insert into genre (genre_id, name) values (1, 'Комедия'),(2, 'Драма')," +
                "(3, 'Мультфильм'),(4, 'Триллер'),(5, 'Документальный'),(6, 'Боевик')");
    }

    @Test
    void getPopularFilmsFilteredByGenre() {

        Film firstFilm = Film.builder()
                .id(1)
                .name("First")
                .description("Первый пошел")
                .releaseDate(LocalDate.of(1990, 1, 1))
                .duration(120)
                .mpa(Mpa.builder()
                        .id(2)
                        .build())
                .genres(List.of(Genre.builder()
                        .id(1)
                        .build()))
                .build();

        Film secondFilm = Film.builder()
                .id(2)
                .name("Second")
                .description("Второй догоняет")
                .releaseDate(LocalDate.of(2024, 1, 1))
                .duration(200)
                .mpa(Mpa.builder()
                        .id(4)
                        .build())
                .genres(List.of(Genre.builder()
                        .id(2)
                        .build()))
                .build();

        FilmDbStorage filmDbStorage = new FilmDbStorage(jdbcTemplate);
        firstFilm = filmDbStorage.create(firstFilm);
        secondFilm = filmDbStorage.create(secondFilm);

        LikesDbStorage likesDbStorage = new LikesDbStorage(jdbcTemplate, filmDbStorage);

        List<Film> savedFilms = likesDbStorage.getFilmsFilteredByGenre(2, 2);

        assertEquals(1, savedFilms.size(), "Неверное количество фильмов");

        assertThat(savedFilms.get(0))
                .isNotNull()
                .usingRecursiveComparison()
                .isEqualTo(secondFilm);

        savedFilms = likesDbStorage.getFilmsFilteredByGenre(2, 1);

        assertEquals(1, savedFilms.size(), "Неверное количество фильмов");

        assertThat(savedFilms.get(0))
                .isNotNull()
                .usingRecursiveComparison()
                .isEqualTo(firstFilm);

        savedFilms = likesDbStorage.getFilmsFilteredByGenre(2, 4);

        assertEquals(0, savedFilms.size(), "Неверное количество фильмов");
    }

    @Test
    void getPopularFilmsFilteredByYear() {

        Film firstFilm = Film.builder()
                .id(1)
                .name("First")
                .description("Первый пошел")
                .releaseDate(LocalDate.of(1990, 1, 1))
                .duration(120)
                .mpa(Mpa.builder()
                        .id(2)
                        .build())
                .genres(List.of(Genre.builder()
                        .id(1)
                        .build()))
                .build();

        Film secondFilm = Film.builder()
                .id(2)
                .name("Second")
                .description("Второй догоняет")
                .releaseDate(LocalDate.of(2024, 1, 1))
                .duration(200)
                .mpa(Mpa.builder()
                        .id(4)
                        .build())
                .genres(List.of(Genre.builder()
                        .id(2)
                        .build()))
                .build();

        FilmDbStorage filmDbStorage = new FilmDbStorage(jdbcTemplate);
        firstFilm = filmDbStorage.create(firstFilm);
        secondFilm = filmDbStorage.create(secondFilm);

        LikesDbStorage likesDbStorage = new LikesDbStorage(jdbcTemplate, filmDbStorage);

        List<Film> savedFilms = likesDbStorage.getFilmsFilteredByYear(2, 2024);

        assertEquals(1, savedFilms.size(), "Неверное количество фильмов");

        assertThat(savedFilms.get(0))
                .isNotNull()
                .usingRecursiveComparison()
                .isEqualTo(secondFilm);

        savedFilms = likesDbStorage.getFilmsFilteredByYear(2, 1990);

        assertEquals(1, savedFilms.size(), "Неверное количество фильмов");

        assertThat(savedFilms.get(0))
                .isNotNull()
                .usingRecursiveComparison()
                .isEqualTo(firstFilm);

        savedFilms = likesDbStorage.getFilmsFilteredByYear(2, 2500);

        assertEquals(0, savedFilms.size(), "Неверное количество фильмов");
    }

    @Test
    void getPopularFilmsFilteredByGenreAndYear() {

        Film firstFilm = Film.builder()
                .id(1)
                .name("First")
                .description("Первый пошел")
                .releaseDate(LocalDate.of(1990, 1, 1))
                .duration(120)
                .mpa(Mpa.builder()
                        .id(2)
                        .build())
                .genres(List.of(Genre.builder()
                        .id(1)
                        .build()))
                .build();

        Film secondFilm = Film.builder()
                .id(2)
                .name("Second")
                .description("Второй догоняет")
                .releaseDate(LocalDate.of(2024, 1, 1))
                .duration(200)
                .mpa(Mpa.builder()
                        .id(4)
                        .build())
                .genres(List.of(Genre.builder()
                        .id(2)
                        .build()))
                .build();

        Film thirdFilm = Film.builder()
                .id(2)
                .name("Second")
                .description("Второй догоняет")
                .releaseDate(LocalDate.of(2000, 1, 1))
                .duration(200)
                .mpa(Mpa.builder()
                        .id(4)
                        .build())
                .genres(List.of(Genre.builder()
                        .id(2)
                        .build()))
                .build();

        FilmDbStorage filmDbStorage = new FilmDbStorage(jdbcTemplate);
        firstFilm = filmDbStorage.create(firstFilm);
        secondFilm = filmDbStorage.create(secondFilm);
        thirdFilm = filmDbStorage.create(thirdFilm);

        LikesDbStorage likesDbStorage = new LikesDbStorage(jdbcTemplate, filmDbStorage);

        List<Film> savedFilms = likesDbStorage.getFilmsFilteredByGenreAndYear(2, 2, 2000);

        assertEquals(1, savedFilms.size(), "Неверное количество фильмов");

        assertThat(savedFilms.get(0))
                .isNotNull()
                .usingRecursiveComparison()
                .isEqualTo(thirdFilm);

        savedFilms = likesDbStorage.getFilmsFilteredByGenreAndYear(2, 2, 2024);

        assertEquals(1, savedFilms.size(), "Неверное количество фильмов");

        assertThat(savedFilms.get(0))
                .isNotNull()
                .usingRecursiveComparison()
                .isEqualTo(secondFilm);

        savedFilms = likesDbStorage.getFilmsFilteredByGenreAndYear(2, 3, 2024);

        assertEquals(0, savedFilms.size(), "Неверное количество фильмов");

        savedFilms = likesDbStorage.getFilmsFilteredByGenreAndYear(2, 1, 2024);

        assertEquals(0, savedFilms.size(), "Неверное количество фильмов");
    }
}