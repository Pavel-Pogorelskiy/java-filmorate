package ru.yandex.practicum.filmorate.storage.db;

import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;
import org.springframework.jdbc.core.JdbcTemplate;
import ru.yandex.practicum.filmorate.model.Mpa;

import java.util.List;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@JdbcTest
@RequiredArgsConstructor(onConstructor_ = @Autowired)
class MpaDbStorageTest {
    private final JdbcTemplate jdbcTemplate;

    @BeforeEach
    public void newDateBase() {
        jdbcTemplate.update("drop table if exists mpa, films, likes,users,friends,genre,genre_link;\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS mpa (\n" +
                "  mpa_id integer PRIMARY KEY,\n" +
                "  name varchar(255) NOT null unique\n" +
                ");\n" +
                "CREATE TABLE IF NOT EXISTS films (\n" +
                "  film_id integer generated by default as identity not null PRIMARY key,\n" +
                "  name varchar(255) NOT NULL,\n" +
                "  description varchar(255),\n" +
                "  releaseDate date NOT null,\n" +
                "  duration integer NOT NULL,\n" +
                "  mpa integer NOT null REFERENCES mpa (mpa_id) on delete cascade\n" +
                ");\n" +
                "\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS users (\n" +
                "  user_id integer generated by default as identity not null PRIMARY key,\n" +
                "  email varchar UNIQUE NOT NULL,\n" +
                "  login varchar(255) NOT NULL,\n" +
                "  name varchar(255) NOT NULL,\n" +
                "  birthday date NOT NULL\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS likes (\n" +
                "film_id integer REFERENCES films (film_id) on delete cascade,\n" +
                "user_id integer REFERENCES users (user_id) on delete cascade,\n" +
                "  PRIMARY KEY (film_id, user_id)\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS friends (\n" +
                "  user_id integer references users (user_id) on delete cascade,\n" +
                "  friends_id integer references users (user_id) on delete cascade,\n" +
                "  PRIMARY KEY (user_id, friends_id)\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS genre (\n" +
                "  genre_id integer PRIMARY KEY,\n" +
                "  name varchar(255) NOT NULL\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS genre_link (\n" +
                "  film_id integer REFERENCES films (film_id) on delete cascade,\n" +
                "  genre_id integer REFERENCES genre (genre_id) on delete cascade,\n" +
                "  PRIMARY KEY (film_id, genre_id)\n" +
                ")");
        jdbcTemplate.update("insert into mpa (mpa_id, name) values (1, 'G'),(2, 'PG'),(3, 'PG-13'),(4, 'R'),(5, 'NC-17')");
        jdbcTemplate.update("insert into genre (genre_id, name) values (1, 'Комедия'),(2, 'Драма'),(3, 'Мультфильм'),(4, 'Триллер'),(5, 'Документальный'),(6, 'Боевик')");
    }

    @Test
    void get() {
        Mpa mpaTest = Mpa.builder()
                .id(1)
                .name("G")
                .build();
        MpaDbStorage mpaStorage = new MpaDbStorage(jdbcTemplate);
        Mpa mpa = mpaStorage.get(1);
        assertThat(mpa)
                .isNotNull()
                .usingRecursiveComparison()
                .isEqualTo(mpaTest);
    }

    @Test
    void getAll() {
        Mpa mpaTest1 = Mpa.builder()
                .id(1)
                .name("G")
                .build();
        Mpa mpaTest2 = Mpa.builder()
                .id(2)
                .name("PG")
                .build();
        Mpa mpaTest3 = Mpa.builder()
                .id(3)
                .name("PG-13")
                .build();
        Mpa mpaTest4 = Mpa.builder()
                .id(4)
                .name("R")
                .build();
        Mpa mpaTest5 = Mpa.builder()
                .id(5)
                .name("NC-17")
                .build();
        MpaDbStorage mpaStorage = new MpaDbStorage(jdbcTemplate);
        List<Mpa> mpa = mpaStorage.getAll();
        assertThat(mpa)
                .isNotNull()
                .usingRecursiveComparison()
                .isEqualTo(List.of(mpaTest1, mpaTest2, mpaTest3, mpaTest4, mpaTest5));
    }
}